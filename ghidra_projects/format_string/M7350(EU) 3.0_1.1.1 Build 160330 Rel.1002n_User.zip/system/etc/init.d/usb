#!/bin/sh
#
# Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE DISCLAIMED.  IN NO
# EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Starts the USB Android Gadget.

export KERNEL=`uname -r`
export ODU="N"
export ODU_EN="N"

case "$1" in
  start)

        case $KERNEL in
          3.*)
		case `source /usr/bin/usb/target` in
			*9x15* )
			# Nothing to do here for 9x15
			;;
			*9x25* )
			if [ -f /sys/module/usbnet/parameters/usbnet_odu ]
			then
				ODU=`cat /sys/module/usbnet/parameters/usbnet_odu`
			fi
			if [ -f /usr/bin/usb/odu ]
			then
				ODU_EN=`cat /usr/bin/usb/odu`
			fi
			echo "ODU supported=$ODU enabled=$ODU_EN"

			#In case of ODU, don't unbind the HSIC device
			if [ "$ODU" == "Y" ] &&  [ "$ODU_EN" == "Y" ]
			then
				echo "EHCI HSIC device will be bound(odu=$ODU)"
				ln -fs /usr/bin/usb/compositions/901D \
				  /usr/bin/usb/boot_hsusb_composition
			else
			#In other cases (for WLAN) unbind HSIC by default
				echo "Shutdown EHCI HSIC device"
				echo msm_hsic_host > /sys/bus/platform/drivers/msm_hsic_host/unbind
			fi
			;;
		esac

		# boot hsusb composition:
		if [ -d /sys/class/android_usb/android0 ]
		then
			# settings
			default_pid="9025"
			default_user_pid="tplink"
			default_debug_pid=$default_pid
			current_mode="`uci get usb.enum.mode`"
			current_debug_pid="`uci get usb.enum.debug_pid`"

			# if device code is not burned
			if [ "`uci get system_state.device_code.is_burned`" = "no" ]
			then
				echo "DEVICE_CODE is not burned. Set to default debug mode"
				current_mode="debug"
				current_debug_pid=$default_debug_pid
				uci set usb.enum.mode="debug"
				uci set usb.enum.debug_pid=$default_debug_pid
				uci commit usb
			fi

			# test default user_pid
			if [ ! -f /usr/bin/usb/compositions/${default_user_pid} ]
			then
				echo "PID_${default_user_pid} not exist"
				default_user_pid=$default_pid
			fi

			# test current debug_pid
			if [ ! -f /usr/bin/usb/compositions/${current_debug_pid} ]
			then
				echo "PID_${current_debug_pid} not exist"
				current_debug_pid=$default_debug_pid
				uci set usb.enum.debug_pid=$current_debug_pid
				uci commit usb
			fi

			# test "fastboot oem factory"
			if [ -n "`cat /proc/cmdline | grep "tplink.fm=1"`" ]
			then
				uci set usb.enum.mode="debug"
				uci set usb.enum.debug_pid=$default_debug_pid
				uci commit usb
				ln -fs /usr/bin/usb/compositions/${default_debug_pid} /usr/bin/usb/boot_hsusb_composition
			else
				if [ $current_mode = "user" ]
				then
					ln -fs /usr/bin/usb/compositions/${default_user_pid} /usr/bin/usb/boot_hsusb_composition
				elif [ $current_mode = "debug" ]
				then
					ln -fs /usr/bin/usb/compositions/${current_debug_pid} /usr/bin/usb/boot_hsusb_composition
				else
					uci set usb.enum.mode="debug"
					uci set usb.enum.debug_pid=$current_debug_pid
					uci commit usb
					ln -fs /usr/bin/usb/compositions/${current_debug_pid} /usr/bin/usb/boot_hsusb_composition
				fi
			fi

			/usr/bin/usb/boot_hsusb_composition n
		fi


		# boot hsic composition:
		if [ -d /sys/class/android_usb/android1 ]
		then
			/usr/bin/usb/boot_hsic_composition y
		fi

		;;
          2.*)
                # Nothing to do for 2.x kernels
                ;;
          *)
                # Some other version of kernel?
                ;;
        esac
        ;;

  stop)
        echo "Stopping USB Android Gadget"
        ;;

  restart)
        $0 stop
        $0 start
        ;;
  *)
        echo "Usage usb { start | stop | restart}" >&2
        exit 1
        ;;
esac

